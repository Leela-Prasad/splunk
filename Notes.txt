What is Splunk?
Splunk can mine data which can unstructured, semi structured, and structured data which will be used to take business decisions.
Here splunk can mine large amount of data that are generated by the machines
It reporting is Near Real time.

Splunk do this by using forwarders and Indexes.

In splunk if we tell a field as a special field (like system_name), then it will give that field on the left hand side for the next searches.
It applies machine learning to do this.

Major functions of splunk
1. Input 
In this phase it will receive data from forwarders or monitors.
2. Parsing
Parsing phase will do field detection.
3. Indexing
Indexing phase writes data to a specific place on the disk.
4. Searching
Searching phase will manage all aspects on how user interacts with splunk.

Splunk Deployment Modes:
1. Standalone
2. Distributed.

Standalone:
All functions IPIS(Input, Parsing, Indexing, Searching) in a single instance.
Here the data comes from
Internal splunk logs i.e., index=“_internal”
Uploads - or any files that user has uploaded.
Monitor - or any directory or files that splunk asked to monitor

In this Basic Deployment we have other machines i.e, number of applications talking to one  splunk search head.
on these applications machines we will install splunk universal forwarders that points to the splunk search head.

Input phase will be done application machines through universal forwarders.
Parsing, Indexing, Searching will happen in splunk search head.

 
Distributed:
Input phase will be done by application machines through universal and Heavy Forwarders.
We have a dedicated machines which are load balanced for doing Indexing and Parsing.
We have multiple splunk search heads for searching.
We have a deployment server which is a central place to manage all of our forwarders

Download Splunk:
wget -O splunk-7.3.0-657388c7a488-Linux-x86_64.tgz 'https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture=x86_64&platform=linux&version=7.3.0&product=splunk&filename=splunk-7.3.0-657388c7a488-Linux-x86_64.tgz&wget=true'


Starting Splunk:
export SPLUNK_HOME=/opt/splunk
export SPLUNK_ETC=/opt/splunk/etc

sudo ${SPLUNK_HOME}/bin/splunk status

${SPLUNK_HOME}/bin/splunk start —accept-license


Splunk Apps:
Apps extend splunks functionality.
Apps can be created by third parties, individuals or splunk
Apps that are built by splunk carry “Splunk Built” Logo.
Apps that are certified by splunk carry “Splunk Certified” Logo.

Here Splunk App is a collection of Splunk configuration files.
An add-on is a subset of an app which is also a collection of configuration files. 
Add-ons doesn’t have GUIs because they are part of larger app.
Add-ons and Apps work together.
Add-ons specify some more details about how the app behaves that includes data collection, lookups and other extended things that apps can do.
Apps can be downloaded from Splunkbase.com

Splunk Metadata:
When we given the input file or folder to monitor splunk will assign below metadata.
1. source - The path of the input file
2. host - Splunk hostname of the instance (forwarder)
3. source type - Splunk attempts to determine  automatically (like cvs, log file etc)
4. index - Defaults to default.

*** Source type controls how the software format your data into events logs and scripts
If your data has custom log format then you can create a new source type and configure event breaks and timestamp recognition manually.

In our project we define log as a json format with fields, to achieve we define a source type.


Search:
Splunk uses unix pipe operator | to send data from previous to the next stage.


sourcetype=WinEventLog:Security EventCode=4625 user=* | time chart span=1h count(EventCode) by user
Here we are searching for files with specific source type 
The source type is the Security portion of WinEventLog.
Then we are narrowing the search to one specific event code 4625 which is a failed log on for all users (user=* is needed because it is used to build table or visualization)
Now finally we are drawing a time chart with time on x-axis with 1h span and count(Eventcode)


sourcetype=WinEventLog:Security EventCode=4625 user=* |stats count(EventCode) by user
Here stats is used to create a statistics.


sourcetype=WinEventLog:Security EventCode=4625 user=* |stats count(EventCode) by user _time| table _time user count(EventCode) | sort -_time

Here table is used to create a table.


Search Modes:
1. Fast
No filed discovery except default metadata fields(i.e., interesting fields will not come)
Use if you know exactly which fields you need and can specify them in the search string.

2. Smart
Returns best results for whatever search you are running.

3. Verbose
Discovers all fields it can
Use if you are not sure what fields you want to report.

Field Extraction
Suppose if your log message contains multiple fields and splunk detects that as string in the interesting fields then you teach splunk which field that it should extract to interesting fields.

top, rare and stats:
top:
top <field>
returns most common values of a given field
Defaults to 10 fields
can be combined with limit=<number>
Automatically builds a table with count and percent columns
can be used with multiple fields - return top value for a field organised by another field.

rare:
rare <field>
opposite to top
returns least common values of a field
options are identical to top.

stats:
stats<function(field)> BY <field(s)>

some common functions
count avg max mean median sum stdev, values, list